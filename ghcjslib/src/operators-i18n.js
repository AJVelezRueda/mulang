(() => {
  const OPERATORS_LOCALES = {
    en: {
      UsesAnd: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_And']}</code>`,
      UsesBackwardComposition: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_BackwardComposition']}</code>`,
      UsesBitwiseAnd: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_BitwiseAnd']}</code>`,
      UsesBitwiseLeftShift: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_BitwiseLeftShift']}</code>`,
      UsesBitwiseOr: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_BitwiseOr']}</code>`,
      UsesBitwiseRightShift: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_BitwiseRightShift']}</code>`,
      UsesBitwiseXor: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_BitwiseXor']}</code>`,
      UsesDivide: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Divide']}</code>`,
      UsesEqual: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Equal']}</code>`,
      UsesForwardComposition: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_ForwardComposition']}</code>`,
      UsesGreatherOrEqualThan: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_GreatherOrEqualThan']}</code>`,
      UsesGreatherThan: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_GreatherThan']}</code>`,
      UsesHash: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Hash']}</code>`,
      UsesLessOrEqualThan: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_LessOrEqualThan']}</code>`,
      UsesLessThan: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_LessThan']}</code>`,
      UsesMinus: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Minus']}</code>`,
      UsesModulo: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Modulo']}</code>`,
      UsesMultiply: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Multiply']}</code>`,
      UsesNegation: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Negation']}</code>`,
      UsesNotEqual: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_NotEqual']}</code>`,
      UsesOr: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Or']}</code>`,
      UsesOtherwise: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Otherwise']}</code>`,
      UsesPlus: (binding, must, target, tokens) => `${binding} ${must} use <code>${tokens['operator_Plus']}</code>`,
    },
    es: {
      UsesAnd: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_And']}</code>`,
      UsesBackwardComposition: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BackwardComposition']}</code>`,
      UsesBitwiseAnd: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseAnd']}</code>`,
      UsesBitwiseLeftShift: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseLeftShift']}</code>`,
      UsesBitwiseOr: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseOr']}</code>`,
      UsesBitwiseRightShift: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseRightShift']}</code>`,
      UsesBitwiseXor: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseXor']}</code>`,
      UsesDivide: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Divide']}</code>`,
      UsesEqual: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Equal']}</code>`,
      UsesForwardComposition: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_ForwardComposition']}</code>`,
      UsesGreatherOrEqualThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_GreatherOrEqualThan']}</code>`,
      UsesGreatherThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_GreatherThan']}</code>`,
      UsesHash: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Hash']}</code>`,
      UsesLessOrEqualThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_LessOrEqualThan']}</code>`,
      UsesLessThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_LessThan']}</code>`,
      UsesMinus: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Minus']}</code>`,
      UsesModulo: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Modulo']}</code>`,
      UsesMultiply: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Multiply']}</code>`,
      UsesNegation: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Negation']}</code>`,
      UsesNotEqual: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_NotEqual']}</code>`,
      UsesOr: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Or']}</code>`,
      UsesOtherwise: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Otherwise']}</code>`,
      UsesPlus: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Plus']}</code>`,
    },
    pt: {
      UsesAnd: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_And']}</code>`,
      UsesBackwardComposition: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BackwardComposition']}</code>`,
      UsesBitwiseAnd: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseAnd']}</code>`,
      UsesBitwiseLeftShift: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseLeftShift']}</code>`,
      UsesBitwiseOr: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseOr']}</code>`,
      UsesBitwiseRightShift: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseRightShift']}</code>`,
      UsesBitwiseXor: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_BitwiseXor']}</code>`,
      UsesDivide: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Divide']}</code>`,
      UsesEqual: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Equal']}</code>`,
      UsesForwardComposition: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_ForwardComposition']}</code>`,
      UsesGreatherOrEqualThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_GreatherOrEqualThan']}</code>`,
      UsesGreatherThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_GreatherThan']}</code>`,
      UsesHash: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Hash']}</code>`,
      UsesLessOrEqualThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_LessOrEqualThan']}</code>`,
      UsesLessThan: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_LessThan']}</code>`,
      UsesMinus: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Minus']}</code>`,
      UsesModulo: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Modulo']}</code>`,
      UsesMultiply: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Multiply']}</code>`,
      UsesNegation: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Negation']}</code>`,
      UsesNotEqual: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_NotEqual']}</code>`,
      UsesOr: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Or']}</code>`,
      UsesOtherwise: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Otherwise']}</code>`,
      UsesPlus: (binding, must, target, tokens) => `${binding} ${must} utilizar <code>${tokens['operator_Plus']}</code>`,
    }
  }
  for (let key in OPERATORS_LOCALES) {
    Object.assign(ghcjsExports.I18n.LOCALES[key], OPERATORS_LOCALES[key]);
  }
})();
